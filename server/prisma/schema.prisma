generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATASET")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

enum UserType {
  ADMIN
  USER
}

model Users {
  user_id            String    @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_name          String    @db.VarChar(255)
  user_email         String    @unique @db.VarChar(255)
  user_password      String    @db.VarChar(255)
  user_phone_number  String    @db.VarChar(255)
  user_type          UserType[]  @default([USER])  
  customers          Customers[]

  @@map("users")
}

model Customers {
  customer_id        String    @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_first_name String
  customer_last_name  String
  customer_address    String
  customer_user       Users?    @relation(fields: [customer_userId], references: [user_id], onDelete: SetNull)
  customer_userId     String?  @db.Uuid
  customer_orders     Orders[]
  customer_vehicles   Vehicles[]
  customer_reviews    Reviews[]

  @@map("customers")
}

model Orders {
  order_id           String        @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_date         DateTime
  payment_status     String
  customer           Customers      @relation(fields: [customerId], references: [customer_id], onDelete: Cascade)
  customerId         String        @db.Uuid
  order_packages     OrderPackage[]

  @@map("orders")
}

model Vehicles {
  vehicle_id         String    @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  make               String
  model              String
  year               String
  customer           Customers  @relation(fields: [customerId], references: [customer_id], onDelete: Cascade)
  customerId         String    @db.Uuid

  @@map("vehicles")
}

model Photos {
  photo_id            String    @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  photo_path          String

  @@map("photos")
}

model Reviews {
  review_id       String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  rating          Float
  comment         String
  customer        Customers @relation(fields: [customerId], references: [customer_id], onDelete: Cascade)
  customerId      String   @db.Uuid

  @@map("reviews")
}

model Packages {
  package_id              String    @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  package_name            String
  package_description     String
  package_price           String
  orders          OrderPackage[]

  @@map("packages")
}

model OrderPackage {
  order_package_id  String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order             Orders    @relation(fields: [orderId], references: [order_id])
  package           Packages? @relation(fields: [packageId], references: [package_id])
  orderId           String   @db.Uuid
  packageId         String?  @db.Uuid

  @@map("order_packages")
}
